import meshtools
import plot
import optimize
var sigma = 3 // surface tension
var rho = 1 // density
var g = 9.8 // gravity
var deltaSigma = 0.1 // adhesion
var cube = PolyhedronMesh(
    [
     [-0.5,-0.5,-0.5],
     [-0.5,0.5,-0.5],
     [0.5,-0.5,-0.5],
     [0.5,0.5,-0.5],
     [-0.5,-0.5,0.5],
     [-0.5,0.5,0.5],
     [0.5,-0.5,0.5],
     [0.5,0.5,0.5]
     ],
    [
     [0,1,3,2],
     [0,1,5,4],
     [2,3,7,6],
     [1,3,7,5],
     [0,2,6,4],
     [4,5,7,6]
     ])
cube.addgrade(1)
var bndThres = 1e-6
//var top=Selection(cube, fn (x,y,z) abs(cylPot(x,y,z)) > bndThres)
//top.addgrade(1)
//top.addgrade(2)
var initBottom=Selection(cube, fn (x,y,z) z < -0.5 + 1e-4)
initBottom.addgrade(1)
// cylinder grounding constraint
var r = 2
fn cylPot(x,y,z) { return (y^2)+(z+0.5+r)^2-r^2 }
fn cylPotGrad(x,y,z) { return Matrix([0, 2*y, 2*(z+0.5+r)]) }
//scalar potential for surface pinning
var ldist = ScalarPotential(cylPot, cylPotGrad)
// surface tension
var la=Area()
// gravity
// we want the facet area parallel to the xy plane
// dot [0,0,1] with the normal vector (which is proportional to the facet's area) and multiply by (z^2)/2
var laa=AreaIntegral(fn (x) abs(Matrix([0,0,1]).inner(normal())) * (x[2]^2)/2)
// adhesion
var laaa = AreaEnclosed()
// volume constraint
var lv = VolumeEnclosed()
var initProblem = OptimizationProblem(cube)
initProblem.addlocalconstraint(ldist, selection=initBottom)
initProblem.addenergy(la, prefactor=sigma)
initProblem.addenergy(laa, prefactor=rho*g)
initProblem.addenergy(laaa, selection=initBottom, prefactor=-1*deltaSigma)
initProblem.addconstraint(lv)
var initOpt = ShapeOptimizer(initProblem, cube)
initOpt.stepsize = 0.001
// regularization energy and separate optimization problem
var leq=EquiElement()
var reg = OptimizationProblem(cube)
reg.addenergy(leq)
var ropt = ShapeOptimizer(reg, cube)
/*
var refmax = 3
for (refiter in 1..refmax) {
    print "===Refinement level ${refiter}==="
    for (i in 1..1) {
        print "-Regularize"
        leq.weight=la.integrand(cube)
        ropt.linesearch(3)
        equiangulate(cube)
        opt.relax(20)
    }
    if (refiter==refmax) break
    // Refinement
    
    var mr=MeshRefiner([cube, top, bottom])
    var refmap=mr.refine()
    var newtop=Selection(refmap[cube], fn (x,y,z) abs(cylPot) > bndThres)
    newtop.addgrade(1)
    var newbottom=Selection(refmap[cube], fn (x,y,z) abs(cylPot) <= bndThres)
    newbottom.addgrade(1)
    refmap[top]=newtop
    refmap[bottom]=newbottom
    for (el in [problem, opt]) el.update(refmap)
    cube=refmap[cube]
    top=refmap[top]
    bottom=refmap[bottom]
    //Show(plotselection(cube, bnd, grade=[0,1,2]))
}
*/
/*
print initOpt.totalenergy()
print "\n energy gradients"
for (el in initProblem.energies) print initOpt.gradient(el)
print "\n constraint gradients"
for (el in initProblem.constraints) print initOpt.gradient(el)
print "\n local constraint gradients"
for (el in initProblem.localconstraints) print initOpt.gradient(el)
*/
initOpt.relax(10)
var refmax = 2
for (refiter in 1..refmax) {
    print "===Refinement level ${refiter}==="
    //var mr=MeshRefiner([cube, top, bottom])
    var mr=MeshRefiner([cube, initBottom])
    var refmap=mr.refine()
    //var newtop=Selection(refmap[cube], fn (x,y,z) abs(cylPot) > bndThres)
    //newtop.addgrade(1)
    var newInitBottom=Selection(refmap[cube], fn (x,y,z) z < -0.5 + 1e-4)
    newInitBottom.addgrade(1)
    //refmap[top]=newtop
    refmap[initBottom]=newInitBottom
    for (el in [initProblem, initOpt]) el.update(refmap)
    cube=refmap[cube]
    //top=refmap[top]
    initBottom=refmap[initBottom]
    initOpt.relax(10)
}
var bottom=Selection(cube, fn (x,y,z) abs(cylPot(x,y,z)) < bndThres)
bottom.addgrade(1)
var problem = OptimizationProblem(cube)
problem.addlocalconstraint(ldist, selection=bottom)
problem.addenergy(la, prefactor=sigma)
problem.addenergy(laa, prefactor=rho*g)
problem.addenergy(laaa, selection=bottom, prefactor=-1*deltaSigma)
problem.addconstraint(lv)
var opt = ShapeOptimizer(problem, cube)
opt.stepsize = 0.001
for (i in 1..10) {
    print "-Regularize ${i}"
    leq.weight=la.integrand(cube)
    ropt.linesearch(2)
    equiangulate(cube)
    for (i in 1..50) {
        opt.relax(1)
        for (en in problem.energies) {
            if (en.selection != nil) {
                en.selection = bottom
            }
        }
        for (con in problem.constraints) {
            if (con.selection != nil) {
                con.selection = bottom
            }
        }
        for (lcon in problem.localconstraints) {
            if (lcon.selection != nil) {
                lcon.selection = bottom
            }
        }
    }
}
//Show(plotselection(cube, ground, grade=[0,1,2]))
//Show(plotselection(cube, bnd, grade=[0,1,2]))
fn visualize(mesh, grade, bnd=nil, title=nil) {
    var g
    if (bnd != nil) {
        g = plotselection(
            mesh,
            bnd,
            grade
        )
    }
    else {
        g = plotmesh(
            mesh,
            grade
        )
    }
    g.title = title
    return g
}
//var g = visualize(cube, [0,1,2], bnd=bnd, title="sigma=${sigma}, rho=${rho}, g=${g}, deltaSigma=${deltaSigma}")
/*
// contact angle calculation
// get the lines on the boundary
var bndlines = bnd.idlistforgrade(1)
var lineToFace = cube.connectivitymatrix(2,1)
var faceToVertex = cube.connectivitymatrix(0,2)
var contactangle = 0
fn cross(a, b) {
    return Matrix([ a[1]*b[2]-a[2]*b[1],
                    a[2]*b[0]-a[0]*b[2],
                    a[0]*b[1]-a[1]*b[0] ])
}
for (line in bndlines) { // for each line in the boundary
    var face = lineToFace.rowindices(line) // find the face it is attached to
    if (face.count()>1) {
        // throw(Error("NotBndLine","This line is connected to more than one face, its not on the boundary"))
    print "bad line, not on bnd"
    }
    var vertexNum = faceToVertex.rowindices(face[0]) // find the vertices on that face
    var r0 = cube.vertexposition(vertexNum[0])
    var r1 = cube.vertexposition(vertexNum[1])
    var r2 = cube.vertexposition(vertexNum[2])
    //surface unit Normal
    var N = cross(r1-r0,r2-r1) // calculate the unit normal of the face
    N /=N.norm()
    var boundrypts = [] // find the two points on the z = 0 plane
    if (abs(r0[2])<1e-4) boundrypts.append(r0)
    if (abs(r1[2])<1e-4) boundrypts.append(r1)
    if (abs(r2[2])<1e-4) boundrypts.append(r2)
    var tangent = boundrypts[0]-boundrypts[1] // this line is on z=0 plane
    var contactVector = cross(N,tangent) // normal cross the z=0 line give us a vector away from the z=0 plane that is on the face
    contactangle+=arctan(-sqrt(contactVector[0]^2+contactVector[1]^2),abs(contactVector[2]))/bndlines.count()
}
print contactangle/Pi*180
*/
var graph = plotselection(cube, bottom, grade=[0,1,2])
var cyl = AreaMesh(fn (u, v) [v, r*cos(u), r*sin(u)-r-0.5], -Pi...Pi:Pi/16, -3..3:0.1, closed=[true, false])
var g2 = plotmesh(cyl)
var gcomb = graph + g2
gcomb.title="sigma=${sigma}, rho=${rho}, g=${g}, deltaSigma=${deltaSigma}, r=${r}"
Show(gcomb)
//var bndVertices = bnd.idlistforgrade(0)
//print bndVertices
//print cube.connectivitymatrix(0,1)